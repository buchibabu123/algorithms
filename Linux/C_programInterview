1.)Data Structurs
2.)Functions
3.)BitFields
4.)Pointers

/***************************************************************/
Count No of Set Numbers in a Number

/***************************************************************/
int count = 0;
 
while(n) {
    n = n & (n-1); // turn off the first set bit(1 bit) of a number N.
    count++;
}

// Idea: N & 1 gives the first bit.
int count = 0;
 
while(n > 0) {
    count = count + (N & 1);
    N = N >> 1;
}
 
return count;
/***************************************************************/

flip/toggle of kth Bit

/***************************************************************/

Remember the XOR is used for flipping(changing/reversing) the bit
take 1, shift it k-1 places left, so it is at kth place.
do 'XOR' with N.
N = N ^ (1 << (k-1))  

/***************************************************************/

How to calculate the no of Bits to convert from No A to No B
/***************************************************************/

Remember that for flipping a bit, XOR is chosen.
A XOR B will give you 1 wherever the bits are different and you need to change bits.
now we need to count the no of 1s in C, which is done by above method
the result is no of set bits(1 bits) in A ^ B


Remember that for flipping a bit, XOR is chosen.
A XOR B will give you 1 wherever the bits are different and you need to change bits.
now we need to count the no of 1s in C, which is done by above method
the result is no of set bits(1 bits) in A ^ B

/***************************************************************/

Check if No N if Power of 2 or Not

/***************************************************************/

if N is a power of 2, it will have only one 1, and rest all 0s.
if N is a power of 2, N-1 will have all 1s, except that the 1 bit of N will be converted to 0.
so, if N is a power of 2, then (N & (N-1) == 0)



int n1 = 20;
int n2 = 32;
 
// n = power of 2 will have one 1 followed by all 0s.
// n-1 will have one 0 followed by all 1s.
 
// n & (n-1) is 0 for power of 2, and 1 otherwise.
 
// prints false, becase 20 is not a power of 2.
System.out.println((n1 & (n1-1)) == 0);
 
// prints true, because 32 is a power of 2.
System.out.println((n2 & (n2-1)) == 0);



/***************************************************************/

Ho to get the last 3 bits of an integer

/***************************************************************/

we just do AND with 111.
N & ((1 << 3)-1)

nt n = 22;
int k = 3;
 
// prints "10110"
System.out.println(Integer.toBinaryString(n));
 
// take 1, shift it k digits left, and subtract 1, 
// so that k 1s are left, 1111...k times.
// now do, AND with n, it will give last k digits of n
 
n = n & ((1 << k) - 1);
 
// prints "110", last 3 digits of "10110"
System.out.println(Integer.toBinaryString(n));



/***************************************************************/

Get the 5 Highest bits of a integer (8 bit integer)

/***************************************************************/


    for getting the 5 highest bits, we will remove the lower 3 bits and do 'AND' with 11111.
    we create 11111 by left shifting 1 by 5, 1 << 5, which gives 100000, and subtracting 1, which gives 11111.
    so we create 11111 by (1 << 5)-1
    we remove the lower 3 bits of x by (x >> 3)
    Doing 'AND' gives us the final answer.
    (x >> 3) & ((1 << 5)-1)



/***************************************************************/

Swap 2 No's using Bitwie operators

/***************************************************************/



    A = A ^ B
    B = A ^ B
    A = A ^ B
    Note that (A ^ B) ^ B => (flips every bit of 'A' twice or zero times, essentially which means gives back 'A').
    Note that (A ^ B) ^ ((A ^ B) ^ B) => (A ^ B) ^ A => B => (flips every bit of 'B' twice, essentially giving back 'B')

/***************************************************************/

Swap even and odd bits of a number

/***************************************************************/

N & 0xaaaaaaaa) gives the even bits(because a is 1010, so aa is 10101010, doing & with N, gives the even bits)
(N & 0x55555555) gives the odd bits(because 5 is 0101, so 55 is 01010101, doing & with N, gives the odd bits)
(N & 0xaaaaaaaa) >> 1 shifts even to odd bits
(N & 0x55555555) << 1 shifts odd bits to even bits.
((N & 0xaaaaaaaa) >> 1) | ((N & 0x5555555555) << 1) gives us the required no where even and odd bits are swapped.
